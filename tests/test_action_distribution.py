# ==============================
# tests/test_action_distribution.py
# ==============================
'''
# Este arquivo contÃ©m um teste unitÃ¡rio para analisar a distribuiÃ§Ã£o das aÃ§Ãµes
# executadas pelo agente genÃ©tico (GeneticAgent) durante uma simulaÃ§Ã£o no mundo Wumpus.
#
# O objetivo Ã© garantir que o agente estÃ¡ realmente executando aÃ§Ãµes e permitir
# uma anÃ¡lise didÃ¡tica da variedade de decisÃµes tomadas pelo algoritmo genÃ©tico.
#
# ExplicaÃ§Ã£o do teste:
# - Cria uma instÃ¢ncia do mundo (World) com tamanho 4x4 e semente fixa para reprodutibilidade.
# - Cria uma instÃ¢ncia do agente genÃ©tico (GeneticAgent) passando o mundo criado.
# - Executa o agente e obtÃ©m o resultado da simulaÃ§Ã£o.
# - Extrai a lista de aÃ§Ãµes executadas do histÃ³rico retornado.
# - Conta a frequÃªncia de cada aÃ§Ã£o usando Counter.
# - Imprime a distribuiÃ§Ã£o das aÃ§Ãµes para anÃ¡lise didÃ¡tica.
# - Garante que pelo menos uma aÃ§Ã£o foi executada (teste bÃ¡sico de funcionamento).
'''

import os
import pytest
from collections import Counter
from agents.genetic_agent import GeneticAgent
from world.world import World

# Define o diretÃ³rio base e o diretÃ³rio de saÃ­da para os logs
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
output_dir = os.path.join(BASE_DIR, "logs")

def test_action_distribution():
    # Cria o mundo e o agente genÃ©tico
    world = World(size=4, seed=42)
    agent = GeneticAgent(world)
    # Executa o agente e obtÃ©m o resultado
    result = agent.run()
    # Extrai as aÃ§Ãµes do histÃ³rico
    actions = [h["aÃ§Ã£o"] for h in result["history"]]
    # Conta a frequÃªncia de cada aÃ§Ã£o
    count = Counter(actions)

    # Imprime a distribuiÃ§Ã£o das aÃ§Ãµes para anÃ¡lise didÃ¡tica
    print("ðŸ“Š DistribuiÃ§Ã£o de aÃ§Ãµes:", dict(count))
    assert len(actions) > 0
