# ==============================
# tests/test_final_status.py
# ==============================
'''
# Este arquivo cont√©m um teste unit√°rio para verificar o status final do agente gen√©tico (GeneticAgent)
# ap√≥s a execu√ß√£o de uma simula√ß√£o no ambiente Wumpus World.
#
# O objetivo √© garantir que o agente termina a simula√ß√£o em um dos estados esperados:
# "MORTO", "GANHOU" ou "VIVO". Isso ajuda a validar que o ciclo de vida do agente est√°
# sendo registrado corretamente e que o hist√≥rico de execu√ß√£o est√° consistente.
#
# Explica√ß√£o do teste:
# - Cria uma inst√¢ncia do mundo (World) com tamanho 4x4 e semente fixa para reprodutibilidade.
# - Cria uma inst√¢ncia do agente gen√©tico (GeneticAgent) passando o mundo criado.
# - Executa o agente e obt√©m o resultado da simula√ß√£o.
# - Extrai o status final do agente a partir do √∫ltimo elemento do hist√≥rico.
# - Imprime o status final para an√°lise did√°tica.
# - Garante que o status final est√° entre os valores esperados.
'''

import os
import pytest
from agents.genetic_agent import GeneticAgent
from world.world import World

# Configura√ß√£o do diret√≥rio de sa√≠da para logs
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
output_dir = os.path.join(BASE_DIR, "logs")

def test_final_agent_status():
    # Cria o mundo e o agente gen√©tico
    world = World(size=4, seed=42)
    agent = GeneticAgent(world)
    # Executa o agente e obt√©m o resultado
    result = agent.run()
    # Extrai o status final do hist√≥rico de execu√ß√£o
    last_status = result["history"][-1]["status"]

    # Imprime o status final para an√°lise did√°tica
    print(f"üéØ Status final: {last_status}")
    # Garante que o status final √© um dos esperados
    assert last_status in ["MORTO", "GANHOU", "VIVO"]
