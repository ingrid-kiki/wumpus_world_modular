# ==============================
# agents/logic_agent.py
# ==============================
from agents.logic_knowledge_base import LogicKnowledgeBase

class LogicAgent:
    def __init__(self, world):
        # Refer√™ncia ao ambiente (mundo do Wumpus)
        self.world = world
        # Base de conhecimento l√≥gica para infer√™ncias
        self.knowledge = LogicKnowledgeBase()
        # Hist√≥rico das percep√ß√µes do agente a cada passo
        self.perception_history = []
        self.logger = None  # Ser√° injetado pelo main
    

    def run(self):
        """
        Executa o ciclo de vida do agente l√≥gico.
        Atualiza a base de conhecimento e decide a√ß√µes seguras.
        """
        passo = 1  # Contador de passos do agente
        # Continua enquanto o jogo n√£o termina (vit√≥ria ou morte)
        while not self.world.is_done():
            # Obt√©m percep√ß√µes do ambiente na posi√ß√£o atual
            perception = self.world.perceive()
            
            # Salva percep√ß√£o no hist√≥rico para an√°lise posterior
            self.perception_history.append({
                "passo": passo,
                "perception": perception
            })

            # Exibe percep√ß√£o atual
            print(f"[Passo {passo}] Percep√ß√£o: {perception}")
            
            # Decide pr√≥xima a√ß√£o com base na percep√ß√£o
            action = self.decide(perception)
            
            # Exibe a√ß√£o escolhida
            print(f"[Passo {passo}] A√ß√£o decidida: {action}")
            
            # Executa a√ß√£o no mundo e recebe novo status
            _, status = self.world.step(action)
            
            # Atualiza a posi√ß√£o atual na base de conhecimento
            self.knowledge.update_position(action)
            
            # Registra tudo no logger, se ele existir
            if self.logger:
                self.logger.write(f"[Passo {passo}] Percep√ß√£o: {perception}")
                self.logger.write(f"[Passo {passo}] A√ß√£o decidida: {action}")
                self.logger.write(f"[Passo {passo}] Status: {status}\n")

            
            # Exibe status do agente ap√≥s a a√ß√£o no terminal
            print(f"[Passo {passo}] Status do agente: {status}\n")
            passo += 1  # Incrementa o passo
    
        # Exibe o hist√≥rico completo de percep√ß√µes ao final
        print("üìù Hist√≥rico de percep√ß√µes:")
        for item in self.perception_history:
            print(f"Passo {item['passo']}: {item['perception']}")


    def decide(self, perception):
        """
        Aplica a l√≥gica simb√≥lica do agente baseada nas percep√ß√µes recebidas.
        Retorna a pr√≥xima a√ß√£o l√≥gica a ser executada.
        """
        return self.knowledge.infer_action(perception)
