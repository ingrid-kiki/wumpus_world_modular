# ==============================
# agents/genetic_agent.py
# ==============================
'''
# Este arquivo implementa o GeneticAgent, um agente inteligente para o Wumpus World
# baseado em algoritmos gen√©ticos. O agente utiliza o n√∫cleo do algoritmo gen√©tico
# para evoluir sequ√™ncias de a√ß√µes, buscando maximizar o desempenho no ambiente.
# Durante a execu√ß√£o, o agente coleta hist√≥rico de a√ß√µes, percep√ß√µes e status,
# permitindo an√°lise detalhada do comportamento e integra√ß√£o com benchmarks e gr√°ficos.
'''

from ga.ga_core import GeneticAlgorithm  # Importa o n√∫cleo do algoritmo gen√©tico
from ga.individual import Individual     # Importa a classe de indiv√≠duo
import numpy as np

class GeneticAgent:
    def __init__(self, world, population_size=100, gens=500, chrom_length=100, mutation_rate=0.02, crossover_rate=0.9):
        # Refer√™ncia ao ambiente (mundo do Wumpus)
        self.world = world
        # Instancia o algoritmo gen√©tico com par√¢metros de popula√ß√£o, gera√ß√µes e tamanho do cromossomo
        self.ga = GeneticAlgorithm(
            pop_size=population_size,
            gens=gens,
            chrom_length=chrom_length,
            mutation_rate=mutation_rate,
            crossover_rate=crossover_rate
            )
        # Hist√≥rico das a√ß√µes e percep√ß√µes do agente
        self.history = []

    def run(self):
        """
        Executa o algoritmo gen√©tico para encontrar a melhor sequ√™ncia de a√ß√µes.
        """
        # Executa o algoritmo gen√©tico e obt√©m o melhor indiv√≠duo (sequ√™ncia de a√ß√µes)
        ga_results = self.ga.run(self.world)
        best = ga_results["best"]
        print("\nüß¨ Melhor sequ√™ncia encontrada pelo algoritmo gen√©tico:")
        print(best.chromosome, "\n")
        print("üèÜ Pontua√ß√£o:", best.fitness)
        # Executa a melhor sequ√™ncia de a√ß√µes no mundo real
        passo = 1  # Contador de passos
        for action in best.chromosome:
            # Executa a a√ß√£o no ambiente e obt√©m percep√ß√£o e status
            perception, status = self.world.step(action)
            # Salva informa√ß√µes no hist√≥rico
            self.history.append({
                "passo": passo,
                "a√ß√£o": action,
                "perception": perception,
                "status": status
            })
            # Exibe informa√ß√µes do passo atual
            print(f"[Passo {passo}] A√ß√£o: {action}")
            print(f"[Passo {passo}] Percep√ß√£o recebida: {perception}")
            print(f"[Passo {passo}] Status do agente: {status}\n")
            # Se o agente morreu ou venceu, encerra a execu√ß√£o
            if status == 'MORTO' or status == 'GANHOU':
                break
            passo += 1
        
        # Salva dados de fitness m√©dio e final
        mean_fitness_per_gen = [gen_stats['mean'] for gen_stats in ga_results['fitness_history']]
        final_fitness_dist = ga_results['fitness_pop'][-1] if ga_results['fitness_pop'] else []
        
        # Mapeia a√ß√µes para n√∫meros para que o PCA possa processar os dados
        ACTION_MAP = {action: i for i, action in enumerate(['CIMA', 'BAIXO', 'ESQUERDA', 'DIREITA', 'AGARRAR', 'TIRO'])}
        final_pop_numeric = [
            [ACTION_MAP.get(gene, -1) for gene in chromosome] # Usa .get para seguran√ßa
            for chromosome in ga_results["final_pop"]
        ]

        dados_extra_formatado = {
            "fitness": mean_fitness_per_gen,
            "fitness_pop": np.array(ga_results["fitness_pop"]),
            "fitness_final": final_fitness_dist,
            "pop_final": final_pop_numeric,
            "memory": ga_results.get("memory", []),
            "cpu": ga_results.get("cpu", []),
            "diversidade_vars": ga_results.get("diversidade_vars")
        }

        # Retorna o hist√≥rico de a√ß√µes e os dados extras
        return {
            "history": self.history,
            "dados_extra": dados_extra_formatado,
        }
