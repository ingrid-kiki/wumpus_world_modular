# ==============================
# agents/genetic_agent.py
# ==============================
from ga.ga_core import GeneticAlgorithm  # Importa o n√∫cleo do algoritmo gen√©tico
from ga.individual import Individual     # Importa a classe de indiv√≠duo

class GeneticAgent:
    def __init__(self, world, population_size=50, gens=100, chrom_length=20):
        # Refer√™ncia ao ambiente (mundo do Wumpus)
        self.world = world
        # Instancia o algoritmo gen√©tico com par√¢metros de popula√ß√£o, gera√ß√µes e tamanho do cromossomo
        self.ga = GeneticAlgorithm(population_size, gens, chrom_length)
        # Hist√≥rico das a√ß√µes e percep√ß√µes do agente
        self.history = []

    def run(self):
        """
        Executa o algoritmo gen√©tico para encontrar a melhor sequ√™ncia de a√ß√µes.
        """
        # Executa o algoritmo gen√©tico e obt√©m o melhor indiv√≠duo (sequ√™ncia de a√ß√µes)
        best = self.ga.run(self.world)
        print("\nüß¨ Melhor sequ√™ncia encontrada pelo algoritmo gen√©tico:")
        print(best.chromosome, "\n")
        print("üèÜ Pontua√ß√£o:", best.fitness)
        # Executa a melhor sequ√™ncia de a√ß√µes no mundo real
        passo = 1  # Contador de passos
        for action in best.chromosome:
            # Executa a a√ß√£o no ambiente e obt√©m percep√ß√£o e status
            perception, status = self.world.step(action)
            # Salva informa√ß√µes no hist√≥rico
            self.history.append({
                "passo": passo,
                "a√ß√£o": action,
                "perception": perception,
                "status": status
            })
            # Exibe informa√ß√µes do passo atual
            print(f"[Passo {passo}] A√ß√£o: {action}")
            print(f"[Passo {passo}] Percep√ß√£o recebida: {perception}")
            print(f"[Passo {passo}] Status do agente: {status}\n")
            # Se o agente morreu ou venceu, encerra a execu√ß√£o
            if status == 'DEAD' or status == 'WIN':
                break
            passo += 1

